services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:    
      ZOOKEEPER_CLIENT_PORT: 2181    
      ZOOKEEPER_TICK_TIME: 2000    
      ZOOKEEPER_INIT_LIMIT: 10
    ports:
      - 2181:2181
    healthcheck:
      test: ["CMD", "echo", "ruok", "|", "nc", "localhost", "2181", "|", "grep", "imok"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always

  #Service: kafka
  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LOG_RETENTION_MS: 1200000 # 20 mins log retention 
      KAFKA_LOG_CLEANUP_POLICY: delete
    ports:
      - 9092:9092
      - 29092:29092
    healthcheck:
      test: ["CMD", "kafka-topics", "--list", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
        
  #Service: kafka-init
  kafka-init:
    image: confluentinc/cp-kafka:latest
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    entrypoint: >
      bash -c "
      echo 'Waiting for Kafka to be ready...'; 
      while ! nc -z kafka 9092; do sleep 1; done;
      echo 'Kafka is ready, creating topics...'; 
      kafka-topics --create --bootstrap-server kafka:9092 --replication-factor 1 --partitions 1 --topic website_uptime_queue --if-not-exists;
      echo 'Kafka topic created.'"
    healthcheck:
      test: ["CMD", "kafka-topics", "--describe", "--topic", "website_uptime_queue", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 5s
      retries: 5

  #Service: kafka-producer
  kafka_producer:
    depends_on:
      kafka:
        condition: service_healthy
    build: ./kafka_producer
    container_name: kafka_producer
    environment:
      KAFKA_BROKER: kafka:9092
      KAFKA_TOPIC: website_uptime_topic
      DATABASE_URL: ${DATABASE_URL}
    env_file:
      - .env
    restart: always  

  #Service: kafka-consumer
  kafka_consumer-1:
    depends_on:
      kafka:
        condition: service_healthy
    build: ./kafka_consumer
    environment:
      KAFKA_BROKER: kafka:9092
      KAFKA_TOPIC: website_uptime_topic
      KAFKA_CONSUMER_GROUP: website_uptime_group
      DATABASE_URL: ${DATABASE_URL}
    env_file:
      - .env
    restart: always  

  kafka-consumer-2:
    depends_on:
      kafka:
        condition: service_healthy
    build: ./kafka_consumer
    environment:
      KAFKA_BROKER: kafka:9092 
      KAFKA_TOPIC: website_uptime_topic
      KAFKA_CONSUMER_GROUP: website_uptime_group
      DATABASE_URL: ${DATABASE_URL}
    env_file:
      - .env
    restart: always  

  #Service: http-server
  django-webserver:
   build: ./backend
   container_name: django-webserver
   ports:
     - "8000:8000"
   environment:
     DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY}
     DEBUG: ${DEBUG}
     DJANGO_LOGLEVEL: ${DJANGO_LOGLEVEL}
     DJANGO_ALLOWED_HOSTS: ${DJANGO_ALLOWED_HOSTS}
     DATABASE_URL: ${DATABASE_URL}
   env_file:
     - .env

